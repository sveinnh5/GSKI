#include "arraylist.h"
#include <assert.h>
#include <string>

template <class T>
ArrayList<T>::ArrayList(int size)
{
    maxSize = size;
    currSize = 0;
    moveToStart();
    arr = new T[maxSize];
}

template <class T>
ArrayList<T>::~ArrayList()
{
    delete [] arr;
}
template <class T>
void ArrayList<T>::append(T elem) {
    assert(currSize < maxSize); // List capacity exceeded
    arr[currSize] = elem;
    currSize++;
}
template <class T>
void ArrayList<T>::next() {
    if (currElemPos < currSize)
        currElemPos++;
}

template <class T>
void ArrayList<T>::moveToStart() {
    currElemPos = 0;
}

template <class T>
int ArrayList<T>::length() const {
    return currSize;
}

template <class T>
int ArrayList<T>::currPos() const {
    return currElemPos;
}

template <class T>
T ArrayList<T>::value() const {
    assert(currElemPos >=0 &&  currElemPos < currSize); // No current element
    return arr[currElemPos];
}
